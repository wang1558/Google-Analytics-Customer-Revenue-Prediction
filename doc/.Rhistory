knitr::opts_chunk$set(echo = TRUE)
paid <- train_new[train_new$revenue_convert == 1,]
paidtest <- test_new[test_new$revenue_convert == 1,]
xgbmodel <- model.matrix(transactionRevenue ~ .-X-transactionRevenue-fullVisitorId-visitId-sessionId, data = paid)
View(paid)
xgbmodel <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paid)
xgbtest <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paidtest)
xgb.final <- xgboost(data = xgbmodel,
label = paid$transactionRevenue,
eta = 0.01,
max_depth = 4,
nrounds = 1000,
eval_metric = "rmse",
objective = "reg:linear"
)
library(caret)
library(lme4)
library(xgboost)
library(lubridate)
library(countrycode)
library(highcharter)
library(magrittr)
library(tidyverse)
xgb.final <- xgboost(data = xgbmodel,
label = paid$transactionRevenue,
eta = 0.01,
max_depth = 4,
nrounds = 1000,
eval_metric = "rmse",
objective = "reg:linear"
)
pred.xgb <- predict(xgb.final, newdata = xgbtest)
sqrt(mean((paidtest$transactionRevenue - pred.xgb)^2))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(lme4)
library(xgboost)
library(lubridate)
library(countrycode)
library(highcharter)
library(magrittr)
library(tidyverse)
library(readr)
tr <- read.csv("../data/train_new.csv")
tr <- tr[,-1]
tr <- tr[,-14]
summary(tr$transactionRevenue)
m_lmm0 <- glmer(transactionRevenue ~ (1|fullVisitorId), data = tr)
bg_var <- summary(m_lmm0)$varcor$fullVisitorId[1]
resid_var <- attr(summary(m_lmm0)$varcor, "sc")^2
summary(m_lmm0)
m_lmm1 <- update(m_lmm0, transactionRevenue ~ pageviews + (1|fullVisitorId))
m_lmm2 <- update(m_lmm0, transactionRevenue ~ pageviews + hits + (1|fullVisitorId))
m_lmm3 <- update(m_lmm0, transactionRevenue ~ pageviews + hits + visitNumber + (1|fullVisitorId))
m_lmm4 <- update(m_lmm0, transactionRevenue ~ pageviews + hits + visitNumber + channelGrouping + (1|fullVisitorId))
m_lmm5 <- update(m_lmm0, transactionRevenue ~ pageviews + hits + visitNumber + channelGrouping + browser + (1|fullVisitorId))
m_lmm6 <- update(m_lmm0, transactionRevenue ~ pageviews + hits + visitNumber + channelGrouping + browser + operatingSystem + (1|fullVisitorId))
m_lmm7 <- update(m_lmm0, transactionRevenue ~ pageviews + hits + visitNumber + channelGrouping + browser + operatingSystem + country + (1|fullVisitorId))
anova(m_lmm0, m_lmm1, m_lmm2, m_lmm3, m_lmm4, m_lmm5, m_lmm6, m_lmm7)
pred_lmm <- predict(m_lmm7)
RMSE(tr$transactionRevenue, pred_lmm)
te <- read.csv("../data/test_new.csv")
RMSE(te$transactionRevenue, pred_lmm)
gtrain <- read_csv("../data/gtrain.csv")
revenue_convert<-0
gtrain<-data.frame(gtrain,revenue_convert)
gtrain$revenue_convert[gtrain$transactionRevenue >0]<-1
train_data_Y<-gtrain[gtrain$revenue_convert==1,]
train_data_N<-gtrain[gtrain$revenue_convert==0,]
sample_size_Y <- floor(0.75*nrow(train_data_Y))
sample_size_N <- floor(0.75*nrow(train_data_N))
set.seed(222)
train.ind_Y <- sample(seq_len(nrow(train_data_Y)), size = sample_size_Y)
train.ind_N <- sample(seq_len(nrow(train_data_N)), size = sample_size_N)
train_Y <- train_data_Y[train.ind_Y,]
train_N <- train_data_N[train.ind_N,]
train_sample_N<-sample_n(train_N,nrow(train_Y))
test_Y <-train_data_Y[-train.ind_Y,]
test_N<-train_data_N[-train.ind_N,]
test_sample_N<-sample_n(test_N,nrow(test_Y))
train_new<-rbind(train_Y,train_sample_N)
test_new<-rbind(test_Y,test_sample_N)
paid <- train_new[train_new$revenue_convert == 1,]
paidtest <- test_new[test_new$revenue_convert == 1,]
xgbmodel <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paid)
xgbtest <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paidtest)
xgb.final <- xgboost(data = xgbmodel,
label = paid$transactionRevenue,
eta = 0.01,
max_depth = 4,
nrounds = 1000,
eval_metric = "rmse",
objective = "reg:linear"
)
pred.xgb <- predict(xgb.final, newdata = xgbtest)
sqrt(mean((paidtest$transactionRevenue - pred.xgb)^2))
library(data.table)
library(caret)
library(readr)
library(dplyr)
gtrain <- read_csv("../data/gtrain.csv")
revenue_convert<-0
gtrain<-data.frame(gtrain,revenue_convert)
gtrain$revenue_convert[gtrain$transactionRevenue >0]<-1
train_data_Y<-gtrain[gtrain$revenue_convert==1,]
train_data_N<-gtrain[gtrain$revenue_convert==0,]
sample_size_Y <- floor(0.75*nrow(train_data_Y))
sample_size_N <- floor(0.75*nrow(train_data_N))
set.seed(222)
train.ind_Y <- sample(seq_len(nrow(train_data_Y)), size = sample_size_Y)
train.ind_N <- sample(seq_len(nrow(train_data_N)), size = sample_size_N)
train_Y <- train_data_Y[train.ind_Y,]
train_N <- train_data_N[train.ind_N,]
train_sample_N<-sample_n(train_N,nrow(train_Y))
test_Y <-train_data_Y[-train.ind_Y,]
test_N<-train_data_N[-train.ind_N,]
test_sample_N<-sample_n(test_N,nrow(test_Y))
train_new<-rbind(train_Y,train_sample_N)
test_new<-rbind(test_Y,test_sample_N)
#test_new<-read_csv("test_new.csv")
#train_new<-read_csv('train_new.csv')
# train_new$channelGrouping<-as.factor(train_new$channelGrouping)
# train_new$operatingSystem<-as.factor(train_new$operatingSystem)
#
# test_new$channelGrouping<-as.factor(test_new$channelGrouping)
# test_new$operatingSystem<-as.factor(test_new$operatingSystem)
glm.fit<- glm(revenue_convert~.-X1-transactionRevenue-fullVisitorId-visitId-sessionId-country-operatingSystem, data =train_new , family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs <- predict(glm.fit,test_new[test_new$operatingSystem!='9',],type="response")
# test the predictions and the real data
glm.pred <- rep("0",nrow(test_new))
glm.pred[glm.probs>0.5] = "1"
conf<-table(glm.pred, test_new$revenue_convert)
log.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
log.acc
log.prec <- conf[2,2]/sum(conf[2,])
log.prec
# Recall (true pos/true pos + false neg)
log.rec <- conf[2,2]/sum(conf[,2])
log.rec
# F1 Score
log.f1 <- 2*(log.rec*log.prec)/(log.rec+log.prec)
log.f1
grid_default <- expand.grid(
nrounds = 1000,
max_depth = 10,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
xgbtree <- train(factor(revenue_convert) ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId,
data = train_new,
tuneGrid = grid_default,
method = "xgbTree",
trControl = trainControl(method = "cv"))
xgb.pred <- predict(xgbtree, newdata = test_new)
conf = table(xgb.pred, test_new$revenue_convert)
xgb.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
xgb.acc
xgb.prec <- conf[2,2]/sum(conf[2,])
xgb.prec
# Recall (true pos/true pos + false neg)
xgb.rec <- conf[2,2]/sum(conf[,2])
xgb.rec
# F1 Score
xgb.f1 <- 2*(xgb.rec*xgb.prec)/(xgb.rec+xgb.prec)
xgb.f1
xgbtree
library(randomForest)
set.seed(100)
memory.limit(100000)
#train_new<-read_csv("train_new.csv")
train_new$revenue_convert<-as.factor(train_new$revenue_convert)
test_new$revenue_convert<-as.factor(test_new$revenue_convert)
model_randomforest<-randomForest(revenue_convert~.-X1-transactionRevenue-fullVisitorId-visitId-sessionId,data =train_new, mtry=5,importance=TRUE, type='classification',na.action = na.pass)
print(model_randomforest)
#test_new<-read_csv("test_new.csv")
pred <- predict(model_randomforest, test_new)
conf <- table(pred, test_new$revenue_convert,dnn=c("Prediction", "Actual"))
rf.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
rf.acc
# Precision (true pos/true pos + false pos)
prec <- conf[2,2]/sum(conf[2,])
prec
# Recall (true pos/true pos + false neg)
rec <- conf[2,2]/sum(conf[,2])
rec
# F1 Score
f1 <- 2*(rec*prec)/(rec+prec)
f1
eval.sum <- data.frame(method = c("RF", "Logit", "Xgb"),
accuracy = c(rf.acc, log.acc, xgb.acc),
precision = c(prec, log.prec, xgb.prec),
recall = c(rec, log.rec, xgb.rec),
f1score = c(f1, log.f1, xgb.f1))
eval.sum
conf
table(xgb.pred, test_new$revenue_convert)
table(glm.pred, test_new$revenue_convert)
#test_new<-read_csv("test_new.csv")
#train_new<-read_csv('train_new.csv')
# train_new$channelGrouping<-as.factor(train_new$channelGrouping)
# train_new$operatingSystem<-as.factor(train_new$operatingSystem)
#
# test_new$channelGrouping<-as.factor(test_new$channelGrouping)
# test_new$operatingSystem<-as.factor(test_new$operatingSystem)
glm.fit<- glm(revenue_convert~.-X1-transactionRevenue-fullVisitorId-visitId-sessionId-country-operatingSystem, data =train_new , family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs <- predict(glm.fit,test_new,type="response")
# test the predictions and the real data
glm.pred <- rep("0",nrow(test_new))
glm.pred[glm.probs>0.5] = "1"
conf<-table(glm.pred, test_new$revenue_convert)
log.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
log.acc
log.prec <- conf[2,2]/sum(conf[2,])
log.prec
# Recall (true pos/true pos + false neg)
log.rec <- conf[2,2]/sum(conf[,2])
log.rec
# F1 Score
log.f1 <- 2*(log.rec*log.prec)/(log.rec+log.prec)
log.f1
table(glm.pred, test_new$revenue_convert)
table(xgb.pred, test_new$revenue_convert)
table(pred, test_new$revenue_convert,dnn=c("Prediction", "Actual"))
test_new
test_new$revenue_convert
sum(test_new$revenue_convert)
sum(as.numeric(test_new$revenue_convert))
nrow(test_new)
sum(as.numeric(test_new$revenue_convert))-nrow(test_new)
library(data.table)
library(caret)
library(readr)
library(dplyr)
gtrain <- read_csv("../data/gtrain.csv")
revenue_convert<-0
gtrain <- data.frame(gtrain,revenue_convert)
gtrain$revenue_convert[gtrain$transactionRevenue >0]<-1
train_data_Y<-gtrain[gtrain$revenue_convert==1,]
train_data_N<-gtrain[gtrain$revenue_convert==0,]
sample_size_Y <- floor(0.75*nrow(train_data_Y))
sample_size_N <- floor(0.75*nrow(train_data_N))
set.seed(222)
train.ind_Y <- sample(seq_len(nrow(train_data_Y)), size = sample_size_Y)
train.ind_N <- sample(seq_len(nrow(train_data_N)), size = sample_size_N)
train_Y <- train_data_Y[train.ind_Y,]
train_N <- train_data_N[train.ind_N,]
train_sample_N<-sample_n(train_N,nrow(train_Y))
test_Y <- train_data_Y[-train.ind_Y,]
test_N <- train_data_N[-train.ind_N,]
test_sample_N <- sample_n(test_N, nrow(test_Y))
train_new <- rbind(train_Y,train_sample_N)
test_new <- rbind(test_Y,test_sample_N)
test_new<-read_csv("../data/test_new.csv")
#train_new<-read_csv('../data/train_new.csv')
# train_new$channelGrouping<-as.factor(train_new$channelGrouping)
# train_new$operatingSystem<-as.factor(train_new$operatingSystem)
#
# test_new$channelGrouping<-as.factor(test_new$channelGrouping)
# test_new$operatingSystem<-as.factor(test_new$operatingSystem)
glm.fit<- glm(revenue_convert~.-X1-transactionRevenue-fullVisitorId-visitId-sessionId-country-operatingSystem, data =train_new , family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs <- predict(glm.fit,test_new,type="response")
# test the predictions and the real data
glm.pred <- rep("0",nrow(test_new))
glm.pred[glm.probs>0.5] = "1"
conf<-table(glm.pred, test_new$revenue_convert)
log.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
log.acc
log.prec <- conf[2,2]/sum(conf[2,])
log.prec
# Recall (true pos/true pos + false neg)
log.rec <- conf[2,2]/sum(conf[,2])
log.rec
# F1 Score
log.f1 <- 2*(log.rec*log.prec)/(log.rec+log.prec)
log.f1
conf
grid_default <- expand.grid(
nrounds = 1000,
max_depth = 10,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
xgbtree <- train(factor(revenue_convert) ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId,
data = train_new,
tuneGrid = grid_default,
method = "xgbTree",
trControl = trainControl(method = "cv"))
xgb.pred <- predict(xgbtree, newdata = test_new)
conf = table(xgb.pred, test_new$revenue_convert)
xgb.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
xgb.acc
xgb.prec <- conf[2,2]/sum(conf[2,])
xgb.prec
# Recall (true pos/true pos + false neg)
xgb.rec <- conf[2,2]/sum(conf[,2])
xgb.rec
# F1 Score
xgb.f1 <- 2*(xgb.rec*xgb.prec)/(xgb.rec+xgb.prec)
xgb.f1
xgbtree
library(randomForest)
set.seed(100)
#memory.limit(100000)
#train_new<-read_csv("train_new.csv")
train_new$revenue_convert<-as.factor(train_new$revenue_convert)
test_new$revenue_convert<-as.factor(test_new$revenue_convert)
model_randomforest<-randomForest(revenue_convert~.-X1-transactionRevenue-fullVisitorId-visitId-sessionId,data =train_new, mtry=5,importance=TRUE, type='classification',na.action = na.pass)
print(model_randomforest)
#test_new<-read_csv("test_new.csv")
pred <- predict(model_randomforest, test_new)
conf <- table(pred, test_new$revenue_convert,dnn=c("Prediction", "Actual"))
rf.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
rf.acc
# Precision (true pos/true pos + false pos)
prec <- conf[2,2]/sum(conf[2,])
prec
# Recall (true pos/true pos + false neg)
rec <- conf[2,2]/sum(conf[,2])
rec
# F1 Score
f1 <- 2*(rec*prec)/(rec+prec)
f1
eval.sum <- data.frame(method = c("RF", "Logit", "Xgb"),
accuracy = c(rf.acc, log.acc, xgb.acc),
precision = c(prec, log.prec, xgb.prec),
recall = c(rec, log.rec, xgb.rec),
f1score = c(f1, log.f1, xgb.f1))
eval.sum
knitr::opts_chunk$set(echo = TRUE)
gtrain <- read_csv("../data/gtrain.csv")
revenue_convert<-0
gtrain<-data.frame(gtrain,revenue_convert)
gtrain$revenue_convert[gtrain$transactionRevenue >0]<-1
train_data_Y<-gtrain[gtrain$revenue_convert==1,]
train_data_N<-gtrain[gtrain$revenue_convert==0,]
sample_size_Y <- floor(0.75*nrow(train_data_Y))
sample_size_N <- floor(0.75*nrow(train_data_N))
#set.seed(222)
train.ind_Y <- sample(seq_len(nrow(train_data_Y)), size = sample_size_Y)
train.ind_N <- sample(seq_len(nrow(train_data_N)), size = sample_size_N)
train_Y <- train_data_Y[train.ind_Y,]
train_N <- train_data_N[train.ind_N,]
train_sample_N<-sample_n(train_N,nrow(train_Y))
test_Y <-train_data_Y[-train.ind_Y,]
test_N<-train_data_N[-train.ind_N,]
test_sample_N<-sample_n(test_N,nrow(test_Y))
train_new<-rbind(train_Y,train_sample_N)
#test_new<-rbind(test_Y,test_sample_N)
test_new<-read_csv("../data/test_new.csv")
paid <- train_new[train_new$revenue_convert == 1,]
paidtest <- test_new[test_new$revenue_convert == 1,]
xgbmodel <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paid)
xgbtest <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paidtest)
xgb.final <- xgboost(data = xgbmodel,
label = paid$transactionRevenue,
eta = 0.01,
max_depth = 4,
nrounds = 1000,
eval_metric = "rmse",
objective = "reg:linear"
)
library(caret)
library(lme4)
library(xgboost)
library(lubridate)
library(countrycode)
library(highcharter)
library(magrittr)
library(tidyverse)
library(readr)
paid <- train_new[train_new$revenue_convert == 1,]
paidtest <- test_new[test_new$revenue_convert == 1,]
xgbmodel <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paid)
xgbtest <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paidtest)
xgb.final <- xgboost(data = xgbmodel,
label = paid$transactionRevenue,
eta = 0.01,
max_depth = 4,
nrounds = 1000,
eval_metric = "rmse",
objective = "reg:linear"
)
pred.xgb <- predict(xgb.final, newdata = xgbtest)
sqrt(mean((paidtest$transactionRevenue - pred.xgb)^2))
#test_new<-rbind(test_Y,test_sample_N)
train_new<-read_csv('../data/train_new.csv')
paid <- train_new[train_new$revenue_convert == 1,]
paidtest <- test_new[test_new$revenue_convert == 1,]
xgbmodel <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paid)
xgbtest <- model.matrix(transactionRevenue ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId, data = paidtest)
xgb.final <- xgboost(data = xgbmodel,
label = paid$transactionRevenue,
eta = 0.01,
max_depth = 4,
nrounds = 1000,
eval_metric = "rmse",
objective = "reg:linear"
)
pred.xgb <- predict(xgb.final, newdata = xgbtest)
sqrt(mean((paidtest$transactionRevenue - pred.xgb)^2))
test_N
gtrain <- read_csv("../data/gtrain.csv")
revenue_convert<-0
gtrain <- data.frame(gtrain,revenue_convert)
gtrain$revenue_convert[gtrain$transactionRevenue > 0]<-1
train_data_Y<-gtrain[gtrain$revenue_convert==1,]
train_data_N<-gtrain[gtrain$revenue_convert==0,]
sample_size_Y <- floor(0.75*nrow(train_data_Y))
sample_size_N <- floor(0.75*nrow(train_data_N))
set.seed(222)
train.ind_Y <- sample(seq_len(nrow(train_data_Y)), size = sample_size_Y)
train.ind_N <- sample(seq_len(nrow(train_data_N)), size = sample_size_N)
train_Y <- train_data_Y[train.ind_Y,]
train_N <- train_data_N[train.ind_N,]
train_sample_N<-sample_n(train_N,10*nrow(train_Y))
test_Y <- train_data_Y[-train.ind_Y,]
test_N <- train_data_N[-train.ind_N,]
test_sample_N <- sample_n(test_N, nrow(test_Y))
train_new <- rbind(train_Y,train_sample_N)
#test_new <- rbind(test_Y,test_sample_N)
test_new<-read_csv("../data/test_new.csv")
#train_new<-read_csv('../data/train_new.csv')
# train_new$channelGrouping<-as.factor(train_new$channelGrouping)
# train_new$operatingSystem<-as.factor(train_new$operatingSystem)
#
# test_new$channelGrouping<-as.factor(test_new$channelGrouping)
# test_new$operatingSystem<-as.factor(test_new$operatingSystem)
glm.fit<- glm(revenue_convert~.-X1-transactionRevenue-fullVisitorId-visitId-sessionId-country-operatingSystem, data =train_new , family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs <- predict(glm.fit,test_new,type="response")
# test the predictions and the real data
glm.pred <- rep("0",nrow(test_new))
glm.pred[glm.probs>0.5] = "1"
conf<-table(glm.pred, test_new$revenue_convert)
log.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
log.acc
log.prec <- conf[2,2]/sum(conf[2,])
log.prec
# Recall (true pos/true pos + false neg)
log.rec <- conf[2,2]/sum(conf[,2])
log.rec
# F1 Score
log.f1 <- 2*(log.rec*log.prec)/(log.rec+log.prec)
log.f1
grid_default <- expand.grid(
nrounds = 1000,
max_depth = 10,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
xgbtree <- train(factor(revenue_convert) ~ .-X1-transactionRevenue-fullVisitorId-visitId-sessionId,
data = train_new,
tuneGrid = grid_default,
method = "xgbTree",
trControl = trainControl(method = "cv"))
xgb.pred <- predict(xgbtree, newdata = test_new)
conf = table(xgb.pred, test_new$revenue_convert)
xgb.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
xgb.acc
xgb.prec <- conf[2,2]/sum(conf[2,])
xgb.prec
# Recall (true pos/true pos + false neg)
xgb.rec <- conf[2,2]/sum(conf[,2])
xgb.rec
# F1 Score
xgb.f1 <- 2*(xgb.rec*xgb.prec)/(xgb.rec+xgb.prec)
xgb.f1
xgbtree
library(randomForest)
set.seed(100)
#memory.limit(100000)
#train_new<-read_csv("train_new.csv")
train_new$revenue_convert<-as.factor(train_new$revenue_convert)
test_new$revenue_convert<-as.factor(test_new$revenue_convert)
model_randomforest<-randomForest(revenue_convert~.-X1-transactionRevenue-fullVisitorId-visitId-sessionId,data =train_new, mtry=5,importance=TRUE, type='classification',na.action = na.pass)
print(model_randomforest)
#test_new<-read_csv("test_new.csv")
pred <- predict(model_randomforest, test_new)
conf <- table(pred, test_new$revenue_convert,dnn=c("Prediction", "Actual"))
rf.acc<-(conf[1,1]+conf[2,2])/sum(conf[,])
rf.acc
# Precision (true pos/true pos + false pos)
prec <- conf[2,2]/sum(conf[2,])
prec
# Recall (true pos/true pos + false neg)
rec <- conf[2,2]/sum(conf[,2])
rec
# F1 Score
f1 <- 2*(rec*prec)/(rec+prec)
f1
eval.sum <- data.frame(method = c("RF", "Logit", "Xgb"),
accuracy = c(rf.acc, log.acc, xgb.acc),
precision = c(prec, log.prec, xgb.prec),
recall = c(rec, log.rec, xgb.rec),
f1score = c(f1, log.f1, xgb.f1))
eval.sum
